{"version":3,"sources":["Components/Basemaps.tsx","Components/Header.tsx","Components/RouteLayer.tsx","Components/MapUtils.tsx","Components/RoutePicture.tsx","Components/Slider.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Basemaps","props","_useState","useState","_useState2","Object","slicedToArray","basemaps","setBasemaps","_useState3","_useState4","basemapsCSS","setBasemapsCSS","handleClick","e","preventDefault","currentTarget","tagName","toLowerCase","elementPos","basemapdata","map","x","id","indexOf","innerHTML","basemap","useEffect","loadModules","then","_ref","_ref2","WebTileLayer","Basemap","basemapsArr","b","index","wtl","urlTemplate","url","subDomains","baseLayers","title","type","catch","err","console","error","react_default","a","createElement","className","role","onClick","aria-hidden","key","href","styles","visible","display","hidden","Header","caption","style","RouteLayer","layers","setLayers","GeoJSONLayer","GraphicsLayer","Graphic","routeLayer","gist","geometryType","renderer","symbol","color","width","picsLayer","definitionExpression","height","poiLayer","size","outline","labelingInfo","labelPlacement","labelExpressionInfo","value","symbolLayers","material","halo","verticalOffset","screenLength","maxWorldLength","minWorldLength","callout","border","annimationGraphicsLayer","elevationInfo","mode","offset","unit","add","markerSymbol","when","query","createQuery","where","queryFeatures","response","_response$features$0$","features","geometry","toJSON","paths","y","pointGraphic","setTour","view","addMany","removeMany","MapUtils","getSplit","_getSplit","asyncToGenerator","regenerator_default","mark","_callee","featureSet","wrap","_context","prev","next","sent","Math","min","apply","feature","polygon","line","lineString","distance","length","units","d","floor","abrupt","stop","_x","this","arguments","getScales","initScale","tempScales","i","thisScale","scaleVal","unshift","getRouteCoords","polyline","splits","routeCoords","routeLength","coord","along","push","coordinates","getGraphics","_getGraphics","_callee2","_context2","_x2","_x3","getPicRouteIndex","_getPicRouteIndex","_callee3","route","_context3","esriPt","turfPt","turfPoint","longitude","latitude","nearestPointOnLine","properties","_x4","_x5","_x6","getUrlVars","param","p","URLSearchParams","window","location","search","get","getHeading","point1","point2","bearing","status","active","deactive","RoutePicture","--tx","picAction","getLiClass","getDivClass","src","img","Slider","initSliderVal","sliderVal","setSliderVal","max","onChange","target","handleChange","_tour","_interval","_sliderNum","_sliderChanged","App","setTitle","setCaption","_useState5","_useState6","pics","setPics","_useState7","_useState8","setPicAction","droneView","hidePhotos","geoJson","onStartTourClick","routeNum","coordNum","startRoute","graphics","featGeom","removeAll","getAttribute","picIndexes","setInterval","startRouteInterval","intTime","goTo","picIndex","clearInterval","setTimeout","_tour$routeCoords$_to","point","graphic","clone","set","stationary","heading","center","zoom","tilt","camera","speedFactor","easing","includes","_ref3","filename","scales","queryExtent","extent","expand","t0","t1","decodeURI","substring","lastIndexOf","substr","ts","val","Fragment","Components_Header","esm","loaderOptions","mapProperties","ground","viewProperties","Components_Slider","num","Components_RouteLayer","Scene","Map","Components_Basemaps","pic","Components_RoutePicture","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.72a67b16.chunk.js","sourcesContent":["\r\nimport React, { useState, useEffect } from 'react';\r\nimport { loadModules  } from '@esri/react-arcgis';\r\nimport basemapdata from '../basemaps.json';\r\n\r\ninterface IProps{\r\n    view: any,\r\n    map: any\r\n}\r\n\r\nconst Basemaps = (props: IProps) => {\r\n    const [basemaps, setBasemaps] = useState();\r\n    const [basemapsCSS, setBasemapsCSS] = useState('basemapsSlideup');\r\n\r\n    useEffect(() => {\r\n\r\n        loadModules([\"esri/layers/WebTileLayer\",  \"esri/Basemap\"]).\r\n            then(([WebTileLayer, Basemap]) => {\r\n\r\n                const basemapsArr = basemapdata.basemaps.map((b, index) => {\r\n                    const wtl = new WebTileLayer({\r\n                        urlTemplate: b.url,\r\n                        subDomains: b.subDomains\r\n                    });\r\n                    return new Basemap({\r\n                        baseLayers: [wtl],\r\n                        title: b.id,\r\n                        id: b.id,\r\n                        type: \"WebTiledLayer\"\r\n                        \r\n                    });\r\n                })\r\n                setBasemaps(basemapsArr);\r\n            }).catch((err) => console.error(err))\r\n\r\n            //document.addEventListener('mousedown', handleClick, false);\r\n            return () => {\r\n                setBasemaps(null);\r\n                //document.removeEventListener('mousedown', handleClick, false);\r\n             }\r\n    }, []);\r\n\r\n    \r\n    function handleClick(e: any) {\r\n        e.preventDefault();\r\n        if (e.currentTarget.tagName.toLowerCase() == 'a') {\r\n            var elementPos = basemapdata.basemaps.map(function(x) {return x.id; }).indexOf(e.currentTarget.innerHTML);\r\n            props.map.basemap = basemaps[elementPos];\r\n        }        \r\n        (basemapsCSS == 'basemapsSlideup') ? setBasemapsCSS('basemapsSlidedown') : setBasemapsCSS('basemapsSlideup');\r\n      }\r\n\r\n    return (\r\n        <div className=\"basemap-buttons-container\">\r\n\r\n            <div className=\"esri-widget--button esri-widget esri-interactive\" role=\"button\" title=\"Change Basemap\" onClick={handleClick}  >\r\n                <span aria-hidden=\"true\" role=\"presentation\" className=\"esri-icon esri-icon-basemap\"></span>\r\n                <span className=\"esri-icon-font-fallback-text\">Change Basemap</span>\r\n            </div>\r\n\r\n            <div className={basemapsCSS}>\r\n                <ul className=\"basemapbuttons\">\r\n                    {basemapdata.basemaps.map((b, index) =>\r\n                        <li key={index}>\r\n                            <a onClick={handleClick} href=\"#\">\r\n                                {b.id}\r\n                            </a>\r\n                        </li>\r\n                    )}\r\n                </ul>\r\n            </div>\r\n        </div>\r\n    );\r\n    \r\n}\r\n  \r\nexport default Basemaps;\r\n\r\n\r\n\r\n\r\n","import React from 'react';\r\n\r\ninterface IProps{\r\n    title: string,\r\n    caption: string\r\n    onClick: any\r\n}\r\n\r\nconst styles = {\r\n    visible:  {\r\n        display: \"inline-block\",\r\n    } as React.CSSProperties,\r\n    hidden:  {\r\n        display: \"none\",\r\n    } as React.CSSProperties\r\n} \r\n\r\nconst Header = (props: IProps) => (\r\n    <div className=\"header\">\r\n        <div className=\"tour-title\">\r\n            <div className=\"tour-name\">My 3D Story Tour - {(props.title) ? props.title : \"Loading Story Tour...\"}</div>\r\n        </div>\r\n        <div className=\"tour-caption\">{props.caption}</div>\r\n        <div \r\n            onClick={() => props.onClick()} \r\n            style={(props.title && !props.caption) ? styles.visible : styles.hidden}\r\n            className=\"tour-start\">\r\n            Start tour...\r\n        </div>\r\n    </div>\r\n);\r\n  \r\nexport default Header;","import { useState, useEffect } from 'react';\r\nimport { loadModules } from '@esri/react-arcgis';\r\nimport FeatureSet from 'esri/tasks/support/FeatureSet';\r\n\r\ninterface IProps{\r\n view: any,\r\n map: any,\r\n gist: string,\r\n setTour: any\r\n}\r\n\r\nconst RouteLayer = (props : IProps) => {\r\n    const [layers, setLayers] = useState();\r\n\r\n    useEffect(() => {\r\n\r\n        loadModules([\"esri/layers/GeoJSONLayer\", \"esri/layers/GraphicsLayer\", \"esri/Graphic\"]).\r\n            then(([GeoJSONLayer, GraphicsLayer, Graphic]) => {\r\n\r\n            //-- Create Layers\r\n            const routeLayer = new GeoJSONLayer({\r\n                url: props.gist,\r\n                geometryType: \"polyline\",\r\n                renderer: {\r\n                    type: \"simple\",  // autocasts as new SimpleRenderer()\r\n                    symbol: {\r\n                        type: \"simple-line\",  // autocasts as new SimpleLineSymbol()\r\n                        color: [0, 255, 255, .75],\r\n                        width: 1,\r\n                        style: \"solid\"\r\n                    }\r\n                },\r\n            });\r\n\r\n\r\n            const picsLayer = new GeoJSONLayer({\r\n                 url: props.gist,\r\n                 geometryType: \"point\",\r\n                 definitionExpression: \"Pic is not NULL\",\r\n                // ----------  Only works with full path, due to webpack image encoding ---------------------------\r\n                 renderer: {\r\n                    type: \"simple\",  // autocasts as new SimpleRenderer()\r\n                    symbol: {\r\n                        type: \"picture-marker\",  // autocasts as new SimpleMarkerSymbol()\r\n                        url: \"http://shadc.github.io/presentations/images/camera-64x64.png\",\r\n                        width: \"20px\",\r\n                        height: \"20px\"\r\n                    }\r\n                },\r\n                // renderer: {\r\n                //     type: \"simple\",  // autocasts as new SimpleRenderer()\r\n                //     symbol: {\r\n                //         type: \"simple-marker\",  // autocasts as new SimpleMarkerSymbol()\r\n                //         size: 6,\r\n                //         color: [255, 0, 0, .25],\r\n                //         outline: {  // autocasts as new SimpleLineSymbol()\r\n                //             color: [255, 0, 0, 1],\r\n                //             width: \"1px\"\r\n                //         }\r\n                //     }\r\n                // },\r\n            })\r\n\r\n            const poiLayer = new GeoJSONLayer({\r\n                url: props.gist,\r\n                geometryType: \"point\",\r\n                definitionExpression: \"Pic is NULL\",\r\n                renderer: {\r\n                    type: \"simple\",  // autocasts as new SimpleRenderer()\r\n                    symbol: {\r\n                        type: \"simple-marker\",  // autocasts as new SimpleMarkerSymbol()\r\n                        size: 10,\r\n                        color: [227, 139, 79, .25],\r\n                        outline: {  // autocasts as new SimpleLineSymbol()\r\n                            color: [227, 139, 79, 1],\r\n                            width: \"1px\"\r\n                        }\r\n                    }\r\n                },\r\n                labelingInfo: [{\r\n                    // When using callouts on labels, \"above-center\" is the only allowed position\r\n                    labelPlacement: \"above-center\",\r\n                    labelExpressionInfo: {\r\n                        value: \"{LABEL}\"\r\n                    },\r\n                    symbol: {\r\n                        type: \"label-3d\", // autocasts as new LabelSymbol3D()\r\n                        symbolLayers: [{\r\n                            type: \"text\", // autocasts as new TextSymbol3DLayer()\r\n                            material: {\r\n                                color: \"white\"\r\n                            },\r\n                            halo: {\r\n                                color: [0, 0, 139, .75],\r\n                                size: \"1px\",\r\n                            },\r\n                            size: 10\r\n                        }],\r\n                        // Labels need a small vertical offset that will be used by the callout\r\n                        verticalOffset: {\r\n                            screenLength: 50,\r\n                            maxWorldLength: 1000,\r\n                            minWorldLength: 10\r\n                        },\r\n                        // The callout has to have a defined type (currently only line is possible)\r\n                        // The size, the color and the border color can be customized\r\n                        callout: {\r\n                            type: \"line\", // autocasts as new LineCallout3D()\r\n                            size: 0.2,\r\n                            color: [0, 0, 0],\r\n                            border: {\r\n                                color: [255, 255, 255, 0.7]\r\n                            }\r\n                        }\r\n                    }\r\n                }]\r\n            });\r\n\r\n\r\n            // GRAPHICS FOR ANIMATIONS\r\n            const annimationGraphicsLayer = new GraphicsLayer();\r\n            const currentElevationInfo = {\r\n                mode: \"relative-to-ground\",\r\n                offset: 10,\r\n                unit: \"feet\"\r\n            };\r\n            annimationGraphicsLayer.elevationInfo = currentElevationInfo;\r\n            props.map.add(annimationGraphicsLayer);\r\n\r\n            let markerSymbol = {\r\n                type: \"simple-marker\", // autocasts as new SimpleMarkerSymbol()\r\n                color: [0, 255, 255, .25],\r\n                size:10,\r\n                outline: { // autocasts as new SimpleLineSymbol()\r\n                    color: [0, 255, 255, 1],\r\n                    width: \"1px\"\r\n                }\r\n            };\r\n\r\n            //-- Set Extent to the routeLayer.\r\n            routeLayer.when(() => {\r\n                 const query = routeLayer.createQuery({where : \"OBJECTID = 1\"});\r\n                 routeLayer.queryFeatures(query).then((response : FeatureSet) =>{\r\n                     const [x, y] = response.features[0].geometry.toJSON().paths[0][0];\r\n                     const point = {type:\"point\", x, y}\r\n                     \r\n                     const pointGraphic = new Graphic({\r\n                         geometry: point,\r\n                         symbol: markerSymbol\r\n                     });\r\n                     annimationGraphicsLayer.add(pointGraphic);\r\n                     props.setTour(routeLayer, picsLayer, props.view, pointGraphic);\r\n                 });\r\n            })\r\n\r\n            setLayers([[routeLayer, picsLayer, poiLayer]]);\r\n            props.map.addMany([routeLayer, picsLayer, poiLayer]);\r\n\r\n        }).catch((err) => console.error(err));\r\n\r\n        return function cleanup() {\r\n            props.map.removeMany(layers);\r\n        };\r\n    }, []);\r\n\r\n    return null;\r\n\r\n}\r\n\r\nexport default RouteLayer;","import { length, lineString, along, point as turfPoint, nearestPointOnLine,  bearing } from '@turf/turf';\r\nimport { Polyline, Point as EsriPoint } from 'esri/geometry';\r\nimport FeatureSet from 'esri/tasks/support/FeatureSet';\r\nimport GeoJSONLayer from 'esri/layers/GeoJSONLayer';\r\nimport Graphic from 'esri/Graphic'\r\n\r\n \r\nconst MapUtils = {\r\n  getSplit: async (routeLayer : GeoJSONLayer) => {\r\n    const featureSet : FeatureSet = await routeLayer.queryFeatures();\r\n    return await Math.min.apply(null, featureSet.features.map(feature => {\r\n      const polygon = feature.geometry as Polyline;\r\n      const line = lineString(polygon.paths[0])\r\n      const distance = length(line, { units: 'meters' }) * 3.28084;\r\n      const d = Math.floor(distance / 400); \r\n      if (d <= 5) return 5;\r\n      return d;\r\n    }));\r\n  },\r\n  getScales: (initScale : number[]) => {\r\n    const tempScales = initScale;\r\n    for (let i = 0; i < 19; i++) {\r\n      const thisScale = tempScales[0];\r\n      const scaleVal = (thisScale * ((thisScale / 100) + 1.03))\r\n      tempScales.unshift(scaleVal);\r\n    }\r\n    return tempScales;\r\n  },\r\n  getRouteCoords:(polyline : Polyline, splits: number) => {\r\n    //-- Interpolate Polyline and create array of points along it's route. \r\n    const routeCoords = [];\r\n    const line = lineString(polyline.paths[0]);\r\n    const routeLength = length(line, { units: 'meters' }) * 3.28084;\r\n    for (let i = 0; i <= (routeLength / splits); i++) {\r\n         const coord : any = along(line, (i * (splits * 0.3048)), { units: 'meters' });\r\n         routeCoords.push([coord.geometry.coordinates[0], coord.geometry.coordinates[1]])\r\n    }\r\n    return routeCoords;\r\n  },\r\n  getGraphics: async (routeLayer : GeoJSONLayer, i : number) => {\r\n    const query = routeLayer.createQuery();\r\n    query.where = \"OBJECTID = \" + (i);\r\n    return (await routeLayer.queryFeatures(query)).features as Graphic[];\r\n  },\r\n  getPicRouteIndex: async (routeCoords : [[]], route : string,  picsLayer: GeoJSONLayer) => {\r\n    const query = picsLayer.createQuery();\r\n    query.where = \"Route = '\" + route + \"'\";\r\n    const featureSet : FeatureSet = await picsLayer.queryFeatures(query);\r\n    const line = lineString(routeCoords);\r\n    return featureSet.features.map(feature => {\r\n      const esriPt = feature.geometry as EsriPoint;\r\n      const turfPt = turfPoint([esriPt.longitude, esriPt.latitude]);\r\n      const snapped = nearestPointOnLine(line, turfPt, {units: 'meters'});\r\n      return snapped.properties.index as number;\r\n    });\r\n  },\r\n  getUrlVars: (param : string) => {\r\n    const urlParams = new URLSearchParams(window.location.search);\r\n    let p = urlParams.get(param);\r\n    if (p && p.toLowerCase() == 'yes') return 'true';\r\n    if (p && p.toLowerCase() == 'no') return 'false';\r\n    if (p) return p;\r\n    return 'false';\r\n  },\r\n  getHeading: (point1 : number[], point2 : number[]) => {\r\n    const b = bearing(turfPoint([point1[0], point1[1]]), turfPoint([point2[0], point2[1]]));\r\n    return (b < 0) ? 360 + b : b;\r\n  }\r\n};\r\n\r\n\r\nexport default MapUtils;","import React from 'react';\r\n\r\ninterface IProps{\r\n    picAction: (string | number)[];\r\n    caption: string,\r\n    img: string,\r\n    id: number,\r\n    height:string\r\n}\r\n\r\nconst status = {\r\n    active: 'animateIn',\r\n    deactive: 'animateOut'\r\n};\r\n\r\n\r\nconst RoutePicture = (props: IProps) => {\r\n\r\n    //-- Determine height (as css variable) for each image once deactiveated.\r\n    const formatHeight : any = (height : string) => {\r\n        return {'--tx':height}\r\n    };\r\n\r\n    const getLiClass = (props : IProps) => {\r\n        //For testing   \r\n        //return 'polaroidCenter animateRight';\r\n\r\n        if (props.id == props.picAction[0] && props.picAction[1] == 'deactive') return 'polaroidCenter animateRight';\r\n        if (props.id < props.picAction[0]) return 'polaroidCenter animateRight';\r\n        return 'polaroidCenter';\r\n    };\r\n\r\n    const getDivClass = (props : IProps) => {\r\n        //For testing   \r\n        //return 'polaroid animateOut';\r\n\r\n        if (props.id > props.picAction[0]) return 'polaroid polaroidInitial';\r\n        if (props.id == props.picAction[0]) {\r\n            return 'polaroid ' + status[props.picAction[1] as keyof typeof status]\r\n        }else{\r\n            return 'polaroid animateOut'\r\n        }\r\n    }\r\n\r\n    return (\r\n        <li style={formatHeight(props.height)} className={getLiClass(props)} > \r\n        <div className={getDivClass(props)} >\r\n          <img className=\"picImage\" src={props.img} /> \r\n          <div>{props.caption}</div>\r\n        </div>\r\n    </li>\r\n    )    \r\n};\r\n  \r\nexport default RoutePicture;","import React, { useState } from 'react';\r\n\r\ninterface IProps {\r\n    handleChange: any;\r\n    initSliderVal: number\r\n}\r\n\r\nconst Slider = (props: IProps) => {\r\n    const [sliderVal, setSliderVal] = useState(props.initSliderVal);\r\n    const handleChange = (e: any) => {\r\n        setSliderVal(e.target.value);\r\n        props.handleChange(e.target.value);\r\n    }\r\n\r\n    return (\r\n        <input id=\"slider\" type=\"range\" min=\"1\" max=\"20\" className=\"slider\" value={sliderVal} onChange={handleChange} />\r\n    )\r\n};\r\n\r\nexport default Slider;","import React, { useState } from 'react';\r\nimport './App.css';\r\nimport { Map, Scene } from '@esri/react-arcgis';\r\nimport GeoJSONLayer from 'esri/layers/GeoJSONLayer';\r\nimport { Polyline, Point, Extent } from 'esri/geometry';\r\nimport Graphic from 'esri/Graphic'\r\n\r\nimport Basemaps from \"./Components/Basemaps\";\r\nimport Header from \"./Components/Header\";\r\nimport RouteLayer from \"./Components/RouteLayer\";\r\nimport MapUtils from './Components/MapUtils';\r\nimport RoutePicture from './Components/RoutePicture';\r\nimport Slider from './Components/Slider';\r\n\r\n\r\ninterface ITour {\r\n  map: any,\r\n  routeLayer: GeoJSONLayer,\r\n  picsLayer: GeoJSONLayer,\r\n  splits: number,\r\n  scales: number[],\r\n  pointGraphic: Graphic,\r\n  routeCoords: any,\r\n  picIndexes: number[],\r\n  routeNum: number,\r\n  coordNum: number\r\n}\r\n\r\nconst _tour = {} as ITour;\r\n\r\nlet _gist = \"https://gist.githubusercontent.com/shadc/5f28c0d4f3d3fdf1e789/raw/4495bf6e4194adb1ce215c032c93c1fc8273e32a/Bluebird%2520Day%2520at%2520Mt.%2520Bachelor.geojson\";\r\nlet _interval = 0;\r\nlet _sliderNum = 10;\r\nlet _sliderChanged = false;\r\n\r\n\r\nconst App = () => {\r\n  const [title, setTitle] = useState();\r\n  const [caption, setCaption] = useState('');\r\n  const [pics, setPics] = useState([] as Graphic[]);\r\n  const [picAction, setPicAction] = useState([0, '']);\r\n\r\n\r\n  const droneView = MapUtils.getUrlVars('droneView') == 'true' ? true : false;\r\n  const hidePhotos = MapUtils.getUrlVars('hidePhotos') == 'true' ? true: false;\r\n  const geoJson = MapUtils.getUrlVars('geoJson') == 'false' ? _gist : MapUtils.getUrlVars('geoJson');\r\n\r\n  const onStartTourClick = async () => {\r\n    _tour.routeNum = 1; //1 base;\r\n    _tour.coordNum = 0; //0 base;\r\n    startRoute();\r\n  }\r\n\r\n  const startRoute = async () => {\r\n    if (_tour.map.graphics) _tour.map.graphics.removeAll();\r\n    _tour.routeLayer.definitionExpression = \"OBJECTID < \" + _tour.routeNum;\r\n    const graphics = await MapUtils.getGraphics(_tour.routeLayer, _tour.routeNum);\r\n\r\n    if (!graphics.length) {\r\n      setCaption('');\r\n      return;\r\n    }\r\n\r\n    const featGeom = graphics[0].geometry as Polyline;\r\n    _tour.routeCoords = MapUtils.getRouteCoords(featGeom, _tour.splits);\r\n    setCaption(graphics[0].getAttribute(\"Caption\"));\r\n\r\n    _tour.picIndexes = await MapUtils.getPicRouteIndex(_tour.routeCoords, graphics[0].getAttribute(\"Route\"), _tour.picsLayer);\r\n\r\n    if (droneView) {\r\n      _interval = window.setInterval(startRouteInterval, intTime(_sliderNum));\r\n    } else {\r\n      _tour.map.goTo(featGeom).then(() => {\r\n        _interval = window.setInterval(startRouteInterval, intTime(_sliderNum));\r\n      })\r\n    }\r\n\r\n  }\r\n\r\n\r\n  let picIndex: number = 1;\r\n  const startRouteInterval = () => {\r\n\r\n    //-- Move to the next route if at the end of the interval\r\n    if (_tour.coordNum > (_tour.routeCoords.length - 1)) {\r\n      clearInterval(_interval);\r\n      _tour.coordNum = 0;\r\n      _tour.routeNum++;\r\n      setTimeout(function () { startRoute(); }, 1000);\r\n      return;\r\n    }\r\n\r\n    if (_sliderChanged) {\r\n      clearInterval(_interval);\r\n      _interval = window.setInterval(startRouteInterval, intTime(_sliderNum));\r\n      _sliderChanged = false;\r\n    }\r\n\r\n    //-- Move the graphic\r\n    const [longitude, latitude] = _tour.routeCoords[_tour.coordNum];\r\n    const point = { type: \"point\", longitude, latitude } as Point;\r\n    _tour.pointGraphic.geometry = point;\r\n\r\n    //-- Create Breadcrumb\r\n    const graphic = _tour.pointGraphic.clone();\r\n    graphic.symbol.set('size', 1);\r\n    graphic.geometry = point;\r\n    _tour.map.graphics.add(graphic);\r\n\r\n    if (droneView && _tour.coordNum % 2 && _tour.map.stationary) {\r\n      const point1 = (_tour.coordNum > 10) ? _tour.routeCoords[_tour.coordNum - 10] : _tour.routeCoords[_tour.coordNum];\r\n      const point2 = (_tour.coordNum < _tour.routeCoords.length - 10) ? _tour.routeCoords[_tour.coordNum + 10] : _tour.routeCoords[_tour.coordNum];\r\n      let heading = MapUtils.getHeading(point1, point2);\r\n\r\n      _tour.map.goTo({\r\n        center: [longitude, latitude],\r\n        zoom: 16,\r\n        heading: heading,\r\n        tilt: (_tour.map.camera.tilt > 1) ? _tour.map.camera.tilt : 60\r\n      },\r\n        {\r\n          speedFactor: .9, // animation is 10 times slower than default\r\n          easing: \"linear\" // easing function to slow down when reaching the target\r\n        }\r\n      );\r\n    }\r\n\r\n    //-- Collide with picture???\r\n    if (!hidePhotos && _tour.picIndexes.includes(_tour.coordNum)) {\r\n      clearInterval(_interval);\r\n      setPicAction([picIndex, 'active']);\r\n      setTimeout(function () {\r\n        setPicAction([picIndex, 'deactive']);\r\n        setTimeout(function () {\r\n          _interval = window.setInterval(startRouteInterval, intTime(_sliderNum));\r\n          picIndex++;\r\n        }, 1000);\r\n      }, 4000);\r\n    }\r\n    _tour.coordNum++;\r\n  }\r\n\r\n  const setTour = async (routeLayer: GeoJSONLayer, picsLayer: GeoJSONLayer, map: any, pointGraphic: Graphic) => {\r\n    _tour.routeLayer = routeLayer;\r\n    _tour.picsLayer = picsLayer;\r\n    _tour.map = map;\r\n    _tour.pointGraphic = pointGraphic;\r\n    _tour.routeNum = 1, //1 base;\r\n    _tour.coordNum = 0, //0 base;\r\n    _tour.scales = MapUtils.getScales([4]);\r\n    _tour.splits = await MapUtils.getSplit(routeLayer); //.then(result => _tour.splits = result);\r\n\r\n    routeLayer.queryExtent().then((response : Extent) =>{\r\n      _tour.map.goTo(response.extent.expand(2), {easing : 'in-out-expo'})\r\n    })\r\n\r\n    setPics(((await picsLayer.queryFeatures()).features as Graphic[]));\r\n    const filename = decodeURI(decodeURI(geoJson.substring(geoJson.lastIndexOf('/') + 1)));\r\n    setTitle(filename.substr(0, filename.lastIndexOf('.')) || filename);\r\n  }\r\n\r\n  const scales = [4] // Start at 4 because it's the minimum milliseconds HTML 5 setinterval spec will go.\r\n  for (let i = 0; i < 19; i++) {\r\n    const ts = scales[0];\r\n    const scaleVal = (ts * ((ts / 100) + 1.03))\r\n    scales.unshift(scaleVal);\r\n  }\r\n\r\n  const intTime = (val: number) => {\r\n    return scales[val - 1]\r\n  }\r\n\r\n  const sliderChange = (num: any) => {\r\n    _sliderNum = num;\r\n    _sliderChanged = true;\r\n  }\r\n\r\n\r\n  const loaderOptions = { url: \"http://js.arcgis.com/4.11\" };\r\n  return (\r\n    <>\r\n      <Header caption={caption} title={title} onClick={onStartTourClick} />\r\n\r\n      <Scene\r\n        loaderOptions={loaderOptions}\r\n        className='mapcontainer'\r\n        mapProperties={{ ground: \"world-elevation\" }} //basemap: 'satellite',\r\n        viewProperties={{\r\n          //center: [-121.6788, 44.0033],\r\n          zoom: 2\r\n        }}\r\n      >\r\n        <Slider handleChange={sliderChange} initSliderVal={_sliderNum} />\r\n        <RouteLayer view={Scene} map={Map} gist={geoJson} setTour={setTour} />\r\n        <Basemaps view={Scene} map={Map} />\r\n      </Scene>\r\n\r\n      {<ul>\r\n        {pics.map((pic, index) =>\r\n          <RoutePicture\r\n            key={index}\r\n            height={(10 / (pics.length + 1) * (index + 1) * 10) + \"vh\"}\r\n            id={index + 1}\r\n            picAction={picAction}\r\n            caption={pic.getAttribute(\"Caption\")}\r\n            img={\"http://shadc.github.io/presentations/\" + pic.getAttribute(\"Pic\")}\r\n          />\r\n        )}\r\n      </ul>}\r\n\r\n    </>\r\n  );\r\n}\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}