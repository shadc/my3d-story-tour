{"version":3,"sources":["Components/Basemaps.tsx","Components/Header.tsx","Components/MapUtils.tsx","Components/RouteLayer.tsx","Components/RoutePicture.tsx","Components/Slider.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Basemaps","props","_useState","useState","_useState2","Object","slicedToArray","basemaps","setBasemaps","_useState3","_useState4","basemapsCSS","setBasemapsCSS","useEffect","loadModules","then","_ref","_ref2","WebTileLayer","Basemap","basemapsArr","basemapdata","map","b","index","wtl","subDomains","urlTemplate","url","baseLayers","id","title","type","catch","err","console","log","handleClick","e","preventDefault","currentTarget","tagName","toLowerCase","elementPos","x","indexOf","innerHTML","basemap","react_default","a","createElement","Fragment","className","role","onClick","aria-hidden","key","href","styles","hidden","display","visible","Header","caption","style","MapUtils","getGraphics","_getGraphics","asyncToGenerator","regenerator_default","mark","_callee","routeLayer","i","query","wrap","_context","prev","next","createQuery","where","queryFeatures","abrupt","sent","features","stop","_x","_x2","apply","this","arguments","getHeading","point1","point2","bearing","turfPoint","getPicRouteIndex","_getPicRouteIndex","_callee2","routeCoords","route","picsLayer","featureSet","line","_context2","lineString","feature","esriPt","geometry","turfPt","longitude","latitude","nearestPointOnLine","units","properties","_x3","_x4","_x5","getRouteCoords","polyline","splits","paths","routeLength","length","coord","along","push","coordinates","getScales","initScale","tempScales","thisScale","scaleVal","unshift","getSplit","_getSplit","_callee3","_context3","Math","min","polygon","distance","d","floor","_x6","getUrlVars","param","p","URLSearchParams","window","location","search","get","RouteLayer","layers","setLayers","GeoJSONLayer","GraphicsLayer","Graphic","geometryType","renderer","symbol","color","width","gist","definitionExpression","height","poiLayer","labelingInfo","labelExpressionInfo","value","labelPlacement","callout","border","size","symbolLayers","halo","material","verticalOffset","maxWorldLength","minWorldLength","screenLength","outline","annimationGraphicsLayer","elevationInfo","mode","offset","unit","add","markerSymbol","when","response","_response$features$0$","toJSON","y","pointGraphic","setTour","view","addMany","error","removeMany","status","active","deactive","RoutePicture","picAction","--tx","getDivClass","src","img","defaultProps","Slider","initSliderVal","sliderVal","setSliderVal","max","onChange","target","handleChange","tour","interval","sliderNum","sliderChanged","App","setTitle","setCaption","_useState5","_useState6","pics","setPics","_useState7","_useState8","setPicAction","droneView","hidePhotos","geoJson","onStartTourClick","routeNum","coordNum","startRoute","graphics","featGeom","removeAll","getAttribute","picIndexes","setInterval","startRouteInterval","intTime","goTo","picIndex","clearInterval","setTimeout","_tour$routeCoords$tou","point","graphic","clone","set","stationary","heading","center","tilt","camera","zoom","easing","speedFactor","includes","_ref3","filename","scales","queryExtent","extent","expand","t0","t1","decodeURI","substring","lastIndexOf","substr","ts","val","Components_Header","esm","loaderOptions","mapProperties","ground","viewProperties","Components_Slider","num","Components_RouteLayer","Scene","Map","Components_Basemaps","pic","Components_RoutePicture","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"sQA6EeA,EAnEE,SAACC,GAAkB,IAAAC,EACAC,qBADAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACzBK,EADyBH,EAAA,GACfI,EADeJ,EAAA,GAAAK,EAEMN,mBAAS,mBAFfO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAEzBE,EAFyBD,EAAA,GAEZE,EAFYF,EAAA,GAIhCG,oBAAU,WAsBN,OApBAC,YAAY,CAAC,2BAA4B,iBACrCC,KAAK,SAAAC,GAA6B,IAAAC,EAAAZ,OAAAC,EAAA,EAAAD,CAAAW,EAAA,GAA3BE,EAA2BD,EAAA,GAAbE,EAAaF,EAAA,GAExBG,EAAcC,EAAYd,SAASe,IAAI,SAACC,EAAGC,GAC7C,IAAMC,EAAM,IAAIP,EAAa,CACzBQ,WAAYH,EAAEG,WACdC,YAAaJ,EAAEK,MAEnB,OAAO,IAAIT,EAAQ,CACfU,WAAY,CAACJ,GACbK,GAAIP,EAAEO,GACNC,MAAOR,EAAEO,GACTE,KAAM,oBAIdxB,EAAYY,KAEba,MAAM,SAACC,GAAD,OAASC,QAAQC,IAAIF,KAE3B,WACH1B,EAAY,QAGjB,IAEH,IAAM6B,EAAc,SAACC,GAEjB,GADAA,EAAEC,iBAC4C,MAA1CD,EAAEE,cAAcC,QAAQC,cAAuB,CAC/C,IAAMC,EAAatB,EAAYd,SAASe,IAAI,SAACsB,GAAD,OAAOA,EAAEd,KAChDe,QAAQP,EAAEE,cAAcM,WAC7B7C,EAAMqB,IAAIyB,QAAUxC,EAASoC,GAEK/B,EAArB,oBAAhBD,EAAoD,oBAAsC,oBAG/F,OACIqC,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACIH,EAAAC,EAAAC,cAAA,OAAKE,UAAU,4BACXJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,mDAAmDC,KAAK,SAAStB,MAAM,iBAAiBuB,QAASjB,GAC5GW,EAAAC,EAAAC,cAAA,QAAMK,cAAY,OAAOF,KAAK,eAAeD,UAAU,gCACvDJ,EAAAC,EAAAC,cAAA,QAAME,UAAU,gCAAhB,oBAGRJ,EAAAC,EAAAC,cAAA,OAAKE,UAAWzC,GACZqC,EAAAC,EAAAC,cAAA,MAAIE,UAAU,kBACT/B,EAAYd,SAASe,IAAI,SAACC,EAAGC,GAAJ,OACtBwB,EAAAC,EAAAC,cAAA,MAAIM,IAAKhC,GACLwB,EAAAC,EAAAC,cAAA,KAAGI,QAASjB,EAAaoB,KAAK,KACzBlC,EAAEO,WCzD7B4B,EAAS,CACXC,OAAQ,CACJC,QAAS,QAEbC,QAAS,CACLD,QAAS,iBA4BFE,EAxBA,SAAC7D,GAOZ,OACI+C,EAAAC,EAAAC,cAAA,OAAKE,UAAU,UACXJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,cACXJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,aAAf,sBAAgDnD,EAAM8B,MAAS9B,EAAM8B,MAAQ,0BAEjFiB,EAAAC,EAAAC,cAAA,OAAKE,UAAU,gBAAgBnD,EAAM8D,SACrCf,EAAAC,EAAAC,cAAA,OACII,QAZQ,SAAChB,GACjBA,EAAEC,iBACFtC,EAAMqD,WAWEU,MAAQ/D,EAAM8B,QAAU9B,EAAM8D,QAAWL,EAAOG,QAAUH,EAAOC,OACjEP,UAAU,cAHd,0BCwCGa,EAhEE,CACbC,YAAW,eAAAC,EAAA9D,OAAA+D,EAAA,EAAA/D,CAAAgE,EAAApB,EAAAqB,KAAE,SAAAC,EAAOC,EAA0BC,GAAjC,IAAAC,EAAA,OAAAL,EAAApB,EAAA0B,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cACHJ,EAAQF,EAAWO,eACnBC,MAAQ,cAAiBP,EAFtBG,EAAAE,KAAA,EAGKN,EAAWS,cAAcP,GAH9B,cAAAE,EAAAM,OAAA,SAAAN,EAAAO,KAGsCC,UAHtC,wBAAAR,EAAAS,SAAAd,MAAF,gBAAAe,EAAAC,GAAA,OAAApB,EAAAqB,MAAAC,KAAAC,YAAA,GAKXC,WAAY,SAACC,EAAkBC,GAC3B,IAAMtE,EAAIuE,kBAAQC,gBAAU,CAACH,EAAO,GAAIA,EAAO,KAAMG,gBAAU,CAACF,EAAO,GAAIA,EAAO,MAClF,OAAQtE,EAAI,EAAK,IAAMA,EAAIA,GAE/ByE,iBAAgB,eAAAC,EAAA5F,OAAA+D,EAAA,EAAA/D,CAAAgE,EAAApB,EAAAqB,KAAE,SAAA4B,EAAOC,EAAmBC,EAAeC,GAAzC,IAAA3B,EAAA4B,EAAAC,EAAA,OAAAlC,EAAApB,EAAA0B,KAAA,SAAA6B,GAAA,cAAAA,EAAA3B,KAAA2B,EAAA1B,MAAA,cACRJ,EAAQ2B,EAAUtB,eAClBC,MAAQ,YAAcoB,EAAQ,IAFtBI,EAAA1B,KAAA,EAGuBuB,EAAUpB,cAAcP,GAH/C,cAGR4B,EAHQE,EAAArB,KAIRoB,EAAOE,qBAAWN,GAJVK,EAAAtB,OAAA,SAKPoB,EAAWlB,SAAS9D,IAAI,SAACoF,GAC5B,IAAMC,EAASD,EAAQE,SACjBC,EAASd,gBAAU,CAACY,EAAOG,UAAWH,EAAOI,WAEnD,OADgBC,6BAAmBT,EAAMM,EAAQ,CAAEI,MAAO,WAC3CC,WAAW1F,SAThB,wBAAAgF,EAAAnB,SAAAa,MAAF,gBAAAiB,EAAAC,EAAAC,GAAA,OAAApB,EAAAT,MAAAC,KAAAC,YAAA,GAYhB4B,eAAgB,SAACC,EAAoBC,GAKjC,IAHA,IAAMrB,EAAc,GACdI,EAAOE,qBAAWc,EAASE,MAAM,IACjCC,EAAkD,QAApCC,iBAAOpB,EAAM,CAAEU,MAAO,WACjCxC,EAAI,EAAGA,GAAMiD,EAAcF,EAAS/C,IAAK,CAC9C,IAAMmD,EAAaC,gBAAMtB,EAAO9B,GAAc,MAAT+C,GAAmB,CAAEP,MAAO,WACjEd,EAAY2B,KAAK,CAACF,EAAMhB,SAASmB,YAAY,GAAIH,EAAMhB,SAASmB,YAAY,KAEhF,OAAO5B,GAEX6B,UAAW,SAACC,GAER,IADA,IAAMC,EAAaD,EACVxD,EAAI,EAAGA,EAAI,GAAIA,IAAK,CACzB,IAAM0D,EAAYD,EAAW,GACvBE,EAAYD,GAAcA,EAAY,IAAO,MACnDD,EAAWG,QAAQD,GAEvB,OAAOF,GAEXI,SAAQ,eAAAC,EAAAlI,OAAA+D,EAAA,EAAA/D,CAAAgE,EAAApB,EAAAqB,KAAE,SAAAkE,EAAOhE,GAAP,IAAA8B,EAAA,OAAAjC,EAAApB,EAAA0B,KAAA,SAAA8D,GAAA,cAAAA,EAAA5D,KAAA4D,EAAA3D,MAAA,cAAA2D,EAAA3D,KAAA,EAC+BN,EAAWS,gBAD1C,cACAqB,EADAmC,EAAAtD,KAAAsD,EAAAvD,OAAA,SAECwD,KAAKC,IAAInD,MAAM,KAAMc,EAAWlB,SAAS9D,IAAI,SAACoF,GACjD,IAAMkC,EAAUlC,EAAQE,SAClBL,EAAOE,qBAAWmC,EAAQnB,MAAM,IAChCoB,EAA+C,QAApClB,iBAAOpB,EAAM,CAAEU,MAAO,WACjC6B,EAAIJ,KAAKK,MAAMF,EAAW,KAChC,OAAIC,GAAK,EAAY,EACdA,MARL,wBAAAL,EAAApD,SAAAmD,MAAF,gBAAAQ,GAAA,OAAAT,EAAA/C,MAAAC,KAAAC,YAAA,GAWRuD,WAAY,SAACC,GACT,IACMC,EADY,IAAIC,gBAAgBC,OAAOC,SAASC,QAClCC,IAAIN,GACxB,OAAIC,GAAyB,QAApBA,EAAEzG,cAAkC,OACzCyG,GAAyB,OAApBA,EAAEzG,cAAiC,QACxCyG,GACG,UCsGAM,EA5JI,SAACxJ,GAAkB,IAAAC,EACNC,qBADMC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAC3BwJ,EAD2BtJ,EAAA,GACnBuJ,EADmBvJ,EAAA,GAwJlC,OArJAS,oBAAU,WAgJN,OA9IAC,YAAY,CAAC,2BAA4B,4BAA6B,iBAClEC,KAAK,SAAAC,GAA4C,IAAAC,EAAAZ,OAAAC,EAAA,EAAAD,CAAAW,EAAA,GAA1C4I,EAA0C3I,EAAA,GAA5B4I,EAA4B5I,EAAA,GAAb6I,EAAa7I,EAAA,GAGvCuD,EAAa,IAAIoF,EAAa,CAChCG,aAAc,WACdC,SAAU,CACNC,OAAQ,CACJC,MAAO,CAAC,EAAG,IAAK,IAAK,KACrBlG,MAAO,QACPhC,KAAM,cACNmI,MAAO,GAEXnI,KAAM,UAEVJ,IAAK3B,EAAMmK,OAGT/D,EAAY,IAAIuD,EAAa,CAC/BS,qBAAsB,kBACtBN,aAAc,QAEdC,SAAU,CACNC,OAAQ,CACJK,OAAQ,OACRtI,KAAM,iBACNJ,IAAK,+DACLuI,MAAO,QAEXnI,KAAM,UAEVJ,IAAK3B,EAAMmK,OAeTG,EAAW,IAAIX,EAAa,CAC9BS,qBAAsB,cACtBN,aAAc,QACdS,aAAc,CAAC,CACXC,oBAAqB,CACjBC,MAAO,WAGXC,eAAgB,eAChBV,OAAQ,CAGJW,QAAS,CACLC,OAAQ,CACJX,MAAO,CAAC,IAAK,IAAK,IAAK,KAE3BA,MAAO,CAAC,EAAG,EAAG,GACdY,KAAM,GACN9I,KAAM,QAEV+I,aAAc,CAAC,CACXC,KAAM,CACFd,MAAO,CAAC,EAAG,EAAG,IAAK,KACnBY,KAAM,OAEVG,SAAU,CACNf,MAAO,SAEXY,KAAM,GACN9I,KAAM,SAEVA,KAAM,WAENkJ,eAAgB,CACZC,eAAgB,IAChBC,eAAgB,GAChBC,aAAc,OAI1BrB,SAAU,CACNC,OAAQ,CACJC,MAAO,CAAC,IAAK,IAAK,GAAI,KACtBoB,QAAS,CACLpB,MAAO,CAAC,IAAK,IAAK,GAAI,GACtBC,MAAO,OAEXW,KAAM,GACN9I,KAAM,iBAEVA,KAAM,UAEVJ,IAAK3B,EAAMmK,OAITmB,EAA0B,IAAI1B,EAMpC0B,EAAwBC,cALK,CACzBC,KAAM,qBACNC,OAAQ,GACRC,KAAM,QAGV1L,EAAMqB,IAAIsK,IAAIL,GAEd,IAAMM,EAAe,CACjB3B,MAAO,CAAC,EAAG,IAAK,IAAK,KACrBoB,QAAS,CACLpB,MAAO,CAAC,EAAG,IAAK,IAAK,GACrBC,MAAO,OAEXW,KAAM,GACN9I,KAAM,iBAIVwC,EAAWsH,KAAK,WACZ,IAAMpH,EAAQF,EAAWO,YAAY,CAAEC,MAAO,iBAC9CR,EAAWS,cAAcP,GAAO3D,KAAK,SAACgL,GAAyB,IAAAC,EAAA3L,OAAAC,EAAA,EAAAD,CAC5C0L,EAAS3G,SAAS,GAAGwB,SAASqF,SAASxE,MAAM,GAAG,GADJ,GACpD7E,EADoDoJ,EAAA,GACjDE,EADiDF,EAAA,GAIrDG,EAAe,IAAIrC,EAAQ,CAC7BlD,SAHU,CAAE5E,KAAM,QAASY,IAAGsJ,KAI9BjC,OAAQ4B,IAEZN,EAAwBK,IAAIO,GAC5BlM,EAAMmM,QAAQ5H,EAAY6B,EAAWpG,EAAMoM,KAAMF,OAIzDxC,EAAU,CAAC,CAACnF,EAAY6B,EAAWkE,KACnCtK,EAAMqB,IAAIgL,QAAQ,CAAC9H,EAAY6B,EAAWkE,MAE3CtI,MAAM,SAACC,GAAD,OAAcC,QAAQoK,MAAMrK,KAElC,WACHjC,EAAMqB,IAAIkL,WAAW9C,KAE1B,IAEI,MCzJL+C,EAAS,CACXC,OAAQ,YACRC,SAAU,cAGRC,EAAe,SAAC3M,GAGlB,IAIoB6B,EAAY+K,EAJLvC,EAyB3B,OACItH,EAAAC,EAAAC,cAAA,MAAIc,OA1BmBsG,EA0BCrK,EAAMqK,OAzBvB,CAACwC,OAAQxC,IAyBuBlH,WAtBvBtB,EAsB6C7B,EAAM6B,GAtBvC+K,EAsB2C5M,EAAM4M,UAlBzE/K,IAAO+K,EAAU,IAAuB,aAAjBA,EAAU,GAA4B,8BAC7D/K,EAAK+K,EAAU,GAAa,8BACzB,mBAiBP7J,EAAAC,EAAAC,cAAA,OAAKE,UAdW,SAACtB,EAAY+K,GAI7B,OAAI/K,EAAK+K,EAAU,GAAa,2BAC5B/K,IAAO+K,EAAU,GACV,YAAcJ,EAAOI,EAAU,IAE/B,sBAMKE,CAAY9M,EAAM6B,GAAI7B,EAAM4M,YAC1C7J,EAAAC,EAAAC,cAAA,OAAKE,UAAU,WAAW4J,IAAK/M,EAAMgN,MACrCjK,EAAAC,EAAAC,cAAA,WAAMjD,EAAM8D,YAMtB6I,EAAaM,aAAe,CACxBL,UAAW,CAAC,EAAG,KAGJD,QCtCAO,EAZA,SAAClN,GAAkB,IAAAC,EACIC,mBAASF,EAAMmN,eADnBhN,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACvBmN,EADuBjN,EAAA,GACZkN,EADYlN,EAAA,GAO9B,OACI4C,EAAAC,EAAAC,cAAA,SAAOpB,GAAG,SAASE,KAAK,QAAQ2G,IAAI,IAAI4E,IAAI,KAAKnK,UAAU,SAASsH,MAAO2C,EAAWG,SANrE,SAAClL,GAClBgL,EAAahL,EAAEmL,OAAO/C,OACtBzK,EAAMyN,aAAapL,EAAEmL,OAAO/C,WCiB9BiD,EAAO,GAGTC,EAAW,EACXC,EAAY,GACZC,GAAgB,EAgLLC,EA9KH,WA2HR,IA3Hc,IAAA7N,EACYC,qBADZC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACP6B,EADO3B,EAAA,GACA4N,EADA5N,EAAA,GAAAK,EAEgBN,mBAAS,IAFzBO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAEPsD,EAFOrD,EAAA,GAEEuN,EAFFvN,EAAA,GAAAwN,EAGU/N,mBAAS,IAHnBgO,EAAA9N,OAAAC,EAAA,EAAAD,CAAA6N,EAAA,GAGPE,EAHOD,EAAA,GAGDE,EAHCF,EAAA,GAAAG,EAIoBnO,qBAJpBoO,EAAAlO,OAAAC,EAAA,EAAAD,CAAAiO,EAAA,GAIPzB,EAJO0B,EAAA,GAIIC,EAJJD,EAAA,GAMRE,EAAiD,SAArCxK,EAASgF,WAAW,aAChCyF,EAAmD,SAAtCzK,EAASgF,WAAW,cACjC0F,EAA6C,UAAnC1K,EAASgF,WAAW,WAb3B,kKAa2DhF,EAASgF,WAAW,WAElF2F,EAAgB,eAAA5N,EAAAX,OAAA+D,EAAA,EAAA/D,CAAAgE,EAAApB,EAAAqB,KAAG,SAAAC,IAAA,OAAAF,EAAApB,EAAA0B,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OACrB6I,EAAKkB,SAAW,EAChBlB,EAAKmB,SAAW,EAChBC,IAHqB,wBAAAnK,EAAAS,SAAAd,MAAH,yBAAAvD,EAAAwE,MAAAC,KAAAC,YAAA,GAMhBqJ,EAAU,eAAA9N,EAAAZ,OAAA+D,EAAA,EAAA/D,CAAAgE,EAAApB,EAAAqB,KAAG,SAAA4B,IAAA,IAAA8I,EAAAC,EAAA,OAAA5K,EAAApB,EAAA0B,KAAA,SAAA6B,GAAA,cAAAA,EAAA3B,KAAA2B,EAAA1B,MAAA,cACX6I,EAAKrM,IAAI0N,UAAYrB,EAAKrM,IAAI0N,SAASE,YAC3CvB,EAAKnJ,WAAW6F,qBAAuB,cAAgBsD,EAAKkB,SAF7CrI,EAAA1B,KAAA,EAGQb,EAASC,YAAYyJ,EAAKnJ,WAAYmJ,EAAKkB,UAHnD,WAGTG,EAHSxI,EAAArB,MAKDwC,OALC,CAAAnB,EAAA1B,KAAA,eAMXmJ,EAAW,IANAzH,EAAAtB,OAAA,wBAUT+J,EAAWD,EAAS,GAAGpI,SAC7B+G,EAAKxH,YAAclC,EAASqD,eAAe2H,EAAUtB,EAAKnG,QAC1DyG,EAAWe,EAAS,GAAGG,aAAa,YAZrB3I,EAAA1B,KAAA,GAcSb,EAAS+B,iBAAiB2H,EAAKxH,YAAa6I,EAAS,GAAGG,aAAa,SAAUxB,EAAKtH,WAd7F,QAcfsH,EAAKyB,WAdU5I,EAAArB,KAgBXsJ,EACAb,EAAWvE,OAAOgG,YAAYC,EAAoBC,EAAQ1B,IAE1DF,EAAKrM,IAAIkO,KAAKP,GAAUlO,KAAK,WACzB6M,EAAWvE,OAAOgG,YAAYC,EAAoBC,EAAQ1B,MApBnD,yBAAArH,EAAAnB,SAAAa,MAAH,yBAAAjF,EAAAuE,MAAAC,KAAAC,YAAA,GAyBZ+J,EAAmB,EACjBH,EAAqB,SAArBA,IAGF,GAAI3B,EAAKmB,SAAYnB,EAAKxH,YAAYwB,OAAS,EAK3C,OAJA+H,cAAc9B,GACdD,EAAKmB,SAAW,EAChBnB,EAAKkB,gBACLc,WAAW,WAAQZ,KAAiB,KAIpCjB,IACA4B,cAAc9B,GACdA,EAAWvE,OAAOgG,YAAYC,EAAoBC,EAAQ1B,IAC1DC,GAAgB,GAdS,IAAA8B,EAAAvP,OAAAC,EAAA,EAAAD,CAkBCsN,EAAKxH,YAAYwH,EAAKmB,UAlBvB,GAkBtBhI,EAlBsB8I,EAAA,GAkBX7I,EAlBW6I,EAAA,GAmBvBC,EAAa,CAAE7N,KAAM,QAAS8E,YAAWC,YAC/C4G,EAAKxB,aAAavF,SAAWiJ,EAG7B,IAAMC,EAAUnC,EAAKxB,aAAa4D,QAKlC,GAJAD,EAAQ7F,OAAO+F,IAAI,OAAQ,GAC3BF,EAAQlJ,SAAWiJ,EACnBlC,EAAKrM,IAAI0N,SAASpD,IAAIkE,GAElBrB,GAAad,EAAKmB,SAAW,GAAKnB,EAAKrM,IAAI2O,WAAY,CACvD,IAAMrK,EAAU+H,EAAKmB,SAAW,GAAMnB,EAAKxH,YAAYwH,EAAKmB,SAAW,IAAMnB,EAAKxH,YAAYwH,EAAKmB,UAC7FjJ,EAAU8H,EAAKmB,SAAWnB,EAAKxH,YAAYwB,OAAS,GAAMgG,EAAKxH,YAAYwH,EAAKmB,SAAW,IAAMnB,EAAKxH,YAAYwH,EAAKmB,UACvHoB,EAAUjM,EAAS0B,WAAWC,EAAQC,GAE5C8H,EAAKrM,IAAIkO,KAAK,CACVW,OAAQ,CAACrJ,EAAWC,GACpBmJ,UACAE,KAAOzC,EAAKrM,IAAI+O,OAAOD,KAAO,EAAKzC,EAAKrM,IAAI+O,OAAOD,KAAO,GAC1DE,KAAM,IAEN,CACIC,OAAQ,SACRC,YAAa,MAMpB9B,GAAcf,EAAKyB,WAAWqB,SAAS9C,EAAKmB,YAC7CY,cAAc9B,GACdY,EAAa,CAACiB,EAAU,WACxBE,WAAW,WACPnB,EAAa,CAACiB,EAAU,aACxBE,WAAW,WACP/B,EAAWvE,OAAOgG,YAAYC,EAAoBC,EAAQ1B,IAC1D4B,KACD,MACJ,MAEP9B,EAAKmB,YAGH1C,EAAO,eAAAsE,EAAArQ,OAAA+D,EAAA,EAAA/D,CAAAgE,EAAApB,EAAAqB,KAAG,SAAAkE,EAAOhE,EAA0B6B,EAAyB/E,EAAU6K,GAApE,IAAAwE,EAAA,OAAAtM,EAAApB,EAAA0B,KAAA,SAAA8D,GAAA,cAAAA,EAAA5D,KAAA4D,EAAA3D,MAAA,cACZ6I,EAAKnJ,WAAaA,EAClBmJ,EAAKtH,UAAYA,EACjBsH,EAAKrM,IAAMA,EACXqM,EAAKxB,aAAeA,EACpBwB,EAAKkB,SAAW,EAChBlB,EAAKmB,SAAW,EAChBnB,EAAKiD,OAAS3M,EAAS+D,UAAU,CAAC,IAPtBS,EAAA3D,KAAA,EAQQb,EAASqE,SAAS9D,GAR1B,cAQZmJ,EAAKnG,OAROiB,EAAAtD,KAUZX,EAAWqM,cAAc9P,KAAK,SAACgL,GAC3B4B,EAAKrM,IAAIkO,KAAKzD,EAAS+E,OAAOC,OAAO,GAAI,CAAER,OAAQ,kBAX3C9H,EAAAuI,GAcZ3C,EAdY5F,EAAA3D,KAAA,GAcIuB,EAAUpB,gBAdd,QAAAwD,EAAAwI,GAAAxI,EAAAtD,KAc+BC,UAd/B,EAAAqD,EAAAuI,IAAAvI,EAAAwI,IAeNN,EAAWO,UAAUA,UAAUvC,EAAQwC,UAAUxC,EAAQyC,YAAY,KAAO,KAClFpD,EAAS2C,EAASU,OAAO,EAAGV,EAASS,YAAY,OAAST,GAhB9C,yBAAAlI,EAAApD,SAAAmD,MAAH,gBAAAlD,EAAAC,EAAA4B,EAAAC,GAAA,OAAAsJ,EAAAlL,MAAAC,KAAAC,YAAA,GAmBPkL,EAAS,CAAC,GACPnM,EAAI,EAAGA,EAAI,GAAIA,IAAK,CACzB,IAAM6M,EAAKV,EAAO,GACZxI,EAAYkJ,GAAOA,EAAK,IAAO,MACrCV,EAAOvI,QAAQD,GAGnB,IAAMmH,EAAU,SAACgC,GACb,OAAOX,EAAOW,EAAM,IASxB,OACIvO,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACIH,EAAAC,EAAAC,cAACsO,EAAD,CAAQzN,QAASA,EAAShC,MAAOA,EAAOuB,QAASsL,IAEjD5L,EAAAC,EAAAC,cAACuO,EAAA,EAAD,CACIC,cANU,CAAE9P,IAAK,8BAOjBwB,UAAU,eACVuO,cAAe,CAAEC,OAAQ,mBACzBC,eAAgB,CAEZvB,KAAM,IAGVtN,EAAAC,EAAAC,cAAC4O,EAAD,CAAQpE,aAnBC,SAACqE,GAClBlE,EAAYkE,EACZjE,GAAgB,GAiB4BV,cAAeS,IACnD7K,EAAAC,EAAAC,cAAC8O,EAAD,CAAY3F,KAAM4F,IAAO3Q,IAAK4Q,IAAK9H,KAAMuE,EAASvC,QAASA,IAC3DpJ,EAAAC,EAAAC,cAACiP,EAAD,CAAU9F,KAAM4F,IAAO3Q,IAAK4Q,OAG/BlP,EAAAC,EAAAC,cAAA,UACIkL,EAAK9M,IAAI,SAAC8Q,EAAK5Q,GAAN,OACNwB,EAAAC,EAAAC,cAACmP,EAAD,CACI7O,IAAKhC,EACL8I,OAAmB,IAAV9I,EAAe,OAAc,GAAK4M,EAAKzG,OAAWnG,EAAS,GAAM,KAC1EM,GAAIN,EAAQ,EACZqL,UAAWA,EACX9I,QAASqO,EAAIjD,aAAa,WAC1BlC,IAAK,yCAA2CmF,EAAIjD,aAAa,oBC5LrEmD,QACa,cAA7BjJ,OAAOC,SAASiJ,UAEa,UAA7BlJ,OAAOC,SAASiJ,UAEhBlJ,OAAOC,SAASiJ,SAASC,MACrB,2DCXRC,IAASC,OAAO1P,EAAAC,EAAAC,cAACyP,EAAD,MAASC,SAASC,eAAe,SDuIzC,kBAAmBC,WACnBA,UAAUC,cAAcC,MAAMjS,KAAK,SAACkS,GAChCA,EAAaC","file":"static/js/main.49f4358d.chunk.js","sourcesContent":["\r\nimport { loadModules } from \"@esri/react-arcgis\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport basemapdata from \"../basemaps.json\";\r\n\r\ninterface IProps {\r\n    view: any;\r\n    map: any;\r\n}\r\n\r\nconst Basemaps = (props: IProps) => {\r\n    const [basemaps, setBasemaps] = useState();\r\n    const [basemapsCSS, setBasemapsCSS] = useState(\"basemapsSlideup\");\r\n\r\n    useEffect(() => {\r\n\r\n        loadModules([\"esri/layers/WebTileLayer\", \"esri/Basemap\"]).\r\n            then(([WebTileLayer, Basemap]) => {\r\n\r\n                const basemapsArr = basemapdata.basemaps.map((b, index) => {\r\n                    const wtl = new WebTileLayer({\r\n                        subDomains: b.subDomains,\r\n                        urlTemplate: b.url,\r\n                    });\r\n                    return new Basemap({\r\n                        baseLayers: [wtl],\r\n                        id: b.id,\r\n                        title: b.id,\r\n                        type: \"WebTiledLayer\",\r\n\r\n                    });\r\n                });\r\n                setBasemaps(basemapsArr);\r\n                // tslint:disable-next-line: no-console\r\n            }).catch((err) => console.log(err));\r\n        // document.addEventListener('mousedown', handleClick, false);\r\n        return () => {\r\n            setBasemaps(null);\r\n            // document.removeEventListener('mousedown', handleClick, false);\r\n        };\r\n    }, []);\r\n\r\n    const handleClick = (e: any) => {\r\n        e.preventDefault();\r\n        if (e.currentTarget.tagName.toLowerCase() === \"a\") {\r\n            const elementPos = basemapdata.basemaps.map((x) => x.id)\r\n                .indexOf(e.currentTarget.innerHTML);\r\n            props.map.basemap = basemaps[elementPos];\r\n        }\r\n        (basemapsCSS === \"basemapsSlideup\") ? setBasemapsCSS(\"basemapsSlidedown\") : setBasemapsCSS(\"basemapsSlideup\");\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <div className=\"basemap-button-container\">\r\n                <div className=\"esri-widget--button esri-widget esri-interactive\" role=\"button\" title=\"Change Basemap\" onClick={handleClick}>\r\n                    <span aria-hidden=\"true\" role=\"presentation\" className=\"esri-icon esri-icon-basemap\" />\r\n                    <span className=\"esri-icon-font-fallback-text\">Change Basemap</span>\r\n                </div>\r\n            </div>\r\n            <div className={basemapsCSS}>\r\n                <ul className=\"basemapbuttons\">\r\n                    {basemapdata.basemaps.map((b, index) =>\r\n                        <li key={index}>\r\n                            <a onClick={handleClick} href=\"#\">\r\n                                {b.id}\r\n                            </a>\r\n                        </li>,\r\n                    )}\r\n                </ul>\r\n            </div>\r\n\r\n        </>\r\n    );\r\n\r\n};\r\n\r\nexport default Basemaps;\r\n","import React from \"react\";\r\n\r\ninterface IProps {\r\n    title: string;\r\n    caption: string;\r\n    onClick: any;\r\n}\r\n\r\nconst styles = {\r\n    hidden: {\r\n        display: \"none\",\r\n    },\r\n    visible: {\r\n        display: \"inline-block\",\r\n    },\r\n};\r\n\r\nconst Header = (props: IProps) => {\r\n\r\n    const handleClick = (e: any) => {\r\n        e.preventDefault();\r\n        props.onClick();\r\n    };\r\n\r\n    return (\r\n        <div className=\"header\">\r\n            <div className=\"tour-title\">\r\n                <div className=\"tour-name\">My 3D Story Tour - {(props.title) ? props.title : \"Loading Story Tour...\"}</div>\r\n            </div>\r\n            <div className=\"tour-caption\">{props.caption}</div>\r\n            <div\r\n                onClick={handleClick}\r\n                style={(props.title && !props.caption) ? styles.visible : styles.hidden}\r\n                className=\"tour-start\"\r\n            >\r\n                Start tour...\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Header;\r\n","import { along, bearing, length, lineString, nearestPointOnLine, point as turfPoint } from \"@turf/turf\";\r\nimport { Point as EsriPoint, Polyline } from \"esri/geometry\";\r\nimport Graphic from \"esri/Graphic\";\r\nimport GeoJSONLayer from \"esri/layers/GeoJSONLayer\";\r\nimport FeatureSet from \"esri/tasks/support/FeatureSet\";\r\n\r\nconst MapUtils = {\r\n    getGraphics: async (routeLayer: GeoJSONLayer, i: number) => {\r\n        const query = routeLayer.createQuery();\r\n        query.where = \"OBJECTID = \" + (i);\r\n        return (await routeLayer.queryFeatures(query)).features as Graphic[];\r\n    },\r\n    getHeading: (point1: number[], point2: number[]) => {\r\n        const b = bearing(turfPoint([point1[0], point1[1]]), turfPoint([point2[0], point2[1]]));\r\n        return (b < 0) ? 360 + b : b;\r\n    },\r\n    getPicRouteIndex: async (routeCoords: [[]], route: string, picsLayer: GeoJSONLayer) => {\r\n        const query = picsLayer.createQuery();\r\n        query.where = \"Route = '\" + route + \"'\";\r\n        const featureSet: FeatureSet = await picsLayer.queryFeatures(query);\r\n        const line = lineString(routeCoords);\r\n        return featureSet.features.map((feature) => {\r\n            const esriPt = feature.geometry as EsriPoint;\r\n            const turfPt = turfPoint([esriPt.longitude, esriPt.latitude]);\r\n            const snapped = nearestPointOnLine(line, turfPt, { units: \"meters\" });\r\n            return snapped.properties.index as number;\r\n        });\r\n    },\r\n    getRouteCoords: (polyline: Polyline, splits: number) => {\r\n        // Interpolate Polyline and create array of points along it's route.\r\n        const routeCoords = [];\r\n        const line = lineString(polyline.paths[0]);\r\n        const routeLength = length(line, { units: \"meters\" }) * 3.28084;\r\n        for (let i = 0; i <= (routeLength / splits); i++) {\r\n            const coord: any = along(line, (i * (splits * 0.3048)), { units: \"meters\" });\r\n            routeCoords.push([coord.geometry.coordinates[0], coord.geometry.coordinates[1]]);\r\n        }\r\n        return routeCoords;\r\n    },\r\n    getScales: (initScale: number[]) => {\r\n        const tempScales = initScale;\r\n        for (let i = 0; i < 19; i++) {\r\n            const thisScale = tempScales[0];\r\n            const scaleVal = (thisScale * ((thisScale / 100) + 1.03));\r\n            tempScales.unshift(scaleVal);\r\n        }\r\n        return tempScales;\r\n    },\r\n    getSplit: async (routeLayer: GeoJSONLayer) => {\r\n        const featureSet: FeatureSet = await routeLayer.queryFeatures();\r\n        return Math.min.apply(null, featureSet.features.map((feature) => {\r\n            const polygon = feature.geometry as Polyline;\r\n            const line = lineString(polygon.paths[0]);\r\n            const distance = length(line, { units: \"meters\" }) * 3.28084;\r\n            const d = Math.floor(distance / 400);\r\n            if (d <= 5) { return 5; }\r\n            return d;\r\n        }));\r\n    },\r\n    getUrlVars: (param: string) => {\r\n        const urlParams = new URLSearchParams(window.location.search);\r\n        const p = urlParams.get(param);\r\n        if (p && p.toLowerCase() === \"yes\") { return \"true\"; }\r\n        if (p && p.toLowerCase() === \"no\") { return \"false\"; }\r\n        if (p) { return p; }\r\n        return \"false\";\r\n    },\r\n\r\n};\r\n\r\nexport default MapUtils;\r\n","import { loadModules } from \"@esri/react-arcgis\";\r\nimport FeatureSet from \"esri/tasks/support/FeatureSet\";\r\nimport { useEffect, useState } from \"react\";\r\n\r\ninterface IProps {\r\n    view: any;\r\n    map: any;\r\n    gist: string;\r\n    setTour: any;\r\n}\r\n\r\nconst RouteLayer = (props: IProps) => {\r\n    const [layers, setLayers] = useState();\r\n\r\n    useEffect(() => {\r\n\r\n        loadModules([\"esri/layers/GeoJSONLayer\", \"esri/layers/GraphicsLayer\", \"esri/Graphic\"]).\r\n            then(([GeoJSONLayer, GraphicsLayer, Graphic]) => {\r\n\r\n                // -- Create Layers\r\n                const routeLayer = new GeoJSONLayer({\r\n                    geometryType: \"polyline\",\r\n                    renderer: {\r\n                        symbol: {\r\n                            color: [0, 255, 255, .75],\r\n                            style: \"solid\",\r\n                            type: \"simple-line\",  // autocasts as new SimpleLineSymbol()\r\n                            width: 1,\r\n                        },\r\n                        type: \"simple\",  // autocasts as new SimpleRenderer()\r\n                    },\r\n                    url: props.gist,\r\n                });\r\n\r\n                const picsLayer = new GeoJSONLayer({\r\n                    definitionExpression: \"Pic is not NULL\",\r\n                    geometryType: \"point\",\r\n                    // ----------  Only works with full path, due to webpack image encoding ---------------------------\r\n                    renderer: {\r\n                        symbol: {\r\n                            height: \"20px\",\r\n                            type: \"picture-marker\",  // autocasts as new SimpleMarkerSymbol()\r\n                            url: \"http://shadc.github.io/presentations/images/camera-64x64.png\",\r\n                            width: \"20px\",\r\n                        },\r\n                        type: \"simple\",  // autocasts as new SimpleRenderer()\r\n                    },\r\n                    url: props.gist,\r\n                    // renderer: {\r\n                    //     type: \"simple\",  // autocasts as new SimpleRenderer()\r\n                    //     symbol: {\r\n                    //         type: \"simple-marker\",  // autocasts as new SimpleMarkerSymbol()\r\n                    //         size: 6,\r\n                    //         color: [255, 0, 0, .25],\r\n                    //         outline: {  // autocasts as new SimpleLineSymbol()\r\n                    //             color: [255, 0, 0, 1],\r\n                    //             width: \"1px\"\r\n                    //         }\r\n                    //     }\r\n                    // },\r\n                });\r\n\r\n                const poiLayer = new GeoJSONLayer({\r\n                    definitionExpression: \"Pic is NULL\",\r\n                    geometryType: \"point\",\r\n                    labelingInfo: [{\r\n                        labelExpressionInfo: {\r\n                            value: \"{LABEL}\",\r\n                        },\r\n                        // When using callouts on labels, \"above-center\" is the only allowed position\r\n                        labelPlacement: \"above-center\",\r\n                        symbol: {\r\n                            // The callout has to have a defined type (currently only line is possible)\r\n                            // The size, the color and the border color can be customized\r\n                            callout: {\r\n                                border: {\r\n                                    color: [255, 255, 255, 0.7],\r\n                                },\r\n                                color: [0, 0, 0],\r\n                                size: 0.2,\r\n                                type: \"line\", // autocasts as new LineCallout3D()\r\n                            },\r\n                            symbolLayers: [{\r\n                                halo: {\r\n                                    color: [0, 0, 139, .75],\r\n                                    size: \"1px\",\r\n                                },\r\n                                material: {\r\n                                    color: \"white\",\r\n                                },\r\n                                size: 10,\r\n                                type: \"text\", // autocasts as new TextSymbol3DLayer()\r\n                            }],\r\n                            type: \"label-3d\", // autocasts as new LabelSymbol3D()\r\n                            // Labels need a small vertical offset that will be used by the callout\r\n                            verticalOffset: {\r\n                                maxWorldLength: 1000,\r\n                                minWorldLength: 10,\r\n                                screenLength: 50,\r\n                            },\r\n                        },\r\n                    }],\r\n                    renderer: {\r\n                        symbol: {\r\n                            color: [227, 139, 79, .25],\r\n                            outline: {  // autocasts as new SimpleLineSymbol()\r\n                                color: [227, 139, 79, 1],\r\n                                width: \"1px\",\r\n                            },\r\n                            size: 10,\r\n                            type: \"simple-marker\",  // autocasts as new SimpleMarkerSymbol()\r\n                        },\r\n                        type: \"simple\",  // autocasts as new SimpleRenderer()\r\n                    },\r\n                    url: props.gist,\r\n                });\r\n\r\n                // GRAPHICS FOR ANIMATIONS\r\n                const annimationGraphicsLayer = new GraphicsLayer();\r\n                const currentElevationInfo = {\r\n                    mode: \"relative-to-ground\",\r\n                    offset: 10,\r\n                    unit: \"feet\",\r\n                };\r\n                annimationGraphicsLayer.elevationInfo = currentElevationInfo;\r\n                props.map.add(annimationGraphicsLayer);\r\n\r\n                const markerSymbol = {\r\n                    color: [0, 255, 255, .25],\r\n                    outline: { // autocasts as new SimpleLineSymbol()\r\n                        color: [0, 255, 255, 1],\r\n                        width: \"1px\",\r\n                    },\r\n                    size: 10,\r\n                    type: \"simple-marker\", // autocasts as new SimpleMarkerSymbol()\r\n                };\r\n\r\n                // -- Set Extent to the routeLayer.\r\n                routeLayer.when(() => {\r\n                    const query = routeLayer.createQuery({ where: \"OBJECTID = 1\" });\r\n                    routeLayer.queryFeatures(query).then((response: FeatureSet) => {\r\n                        const [x, y] = response.features[0].geometry.toJSON().paths[0][0];\r\n                        const point = { type: \"point\", x, y };\r\n\r\n                        const pointGraphic = new Graphic({\r\n                            geometry: point,\r\n                            symbol: markerSymbol,\r\n                        });\r\n                        annimationGraphicsLayer.add(pointGraphic);\r\n                        props.setTour(routeLayer, picsLayer, props.view, pointGraphic);\r\n                    });\r\n                });\r\n\r\n                setLayers([[routeLayer, picsLayer, poiLayer]]);\r\n                props.map.addMany([routeLayer, picsLayer, poiLayer]);\r\n\r\n            }).catch((err: any) => console.error(err));\r\n\r\n        return function cleanup() {\r\n            props.map.removeMany(layers);\r\n        };\r\n    }, []);\r\n\r\n    return null;\r\n\r\n};\r\n\r\nexport default RouteLayer;\r\n","import React from \"react\";\r\n\r\ninterface IProps {\r\n    picAction: [number, string];\r\n    caption: string;\r\n    img: string;\r\n    id: number;\r\n    height: string;\r\n}\r\n\r\nconst status = {\r\n    active: \"animateIn\",\r\n    deactive: \"animateOut\",\r\n};\r\n\r\nconst RoutePicture = (props: IProps) => {\r\n\r\n    // -- Determine height (as css variable) for each image once deactiveated.\r\n    const formatHeight: any = (height: string) => {\r\n        return {\"--tx\": height};\r\n    };\r\n\r\n    const getLiClass = (id: number, picAction: [number, string]) => {\r\n        // For testing\r\n        // return 'polaroidCenter animateRight';\r\n\r\n        if (id === picAction[0] && picAction[1] === \"deactive\") { return \"polaroidCenter animateRight\"; }\r\n        if (id < picAction[0]) { return \"polaroidCenter animateRight\"; }\r\n        return \"polaroidCenter\";\r\n    };\r\n\r\n    const getDivClass = (id: number, picAction: [number, string]) => {\r\n        // For testing\r\n        // return 'polaroid animateOut';\r\n\r\n        if (id > picAction[0]) { return \"polaroid polaroidInitial\"; }\r\n        if (id === picAction[0]) {\r\n            return \"polaroid \" + status[picAction[1] as keyof typeof status];\r\n        } else {\r\n            return \"polaroid animateOut\";\r\n        }\r\n    };\r\n\r\n    return (\r\n        <li style={formatHeight(props.height)} className={getLiClass(props.id, props.picAction)} >\r\n        <div className={getDivClass(props.id, props.picAction)} >\r\n          <img className=\"picImage\" src={props.img} />\r\n          <div>{props.caption}</div>\r\n        </div>\r\n    </li>\r\n    );\r\n};\r\n\r\nRoutePicture.defaultProps = {\r\n    picAction: [0, \"\"],\r\n};\r\n\r\nexport default RoutePicture;\r\n","import React, { useState } from \"react\";\r\n\r\ninterface IProps {\r\n    handleChange: any;\r\n    initSliderVal: number;\r\n}\r\n\r\nconst Slider = (props: IProps) => {\r\n    const [sliderVal, setSliderVal] = useState(props.initSliderVal);\r\n    const handleChange = (e: any) => {\r\n        setSliderVal(e.target.value);\r\n        props.handleChange(e.target.value);\r\n    };\r\n\r\n    return (\r\n        <input id=\"slider\" type=\"range\" min=\"1\" max=\"20\" className=\"slider\" value={sliderVal} onChange={handleChange} />\r\n    );\r\n};\r\n\r\nexport default Slider;\r\n","import { Map, Scene } from \"@esri/react-arcgis\";\r\nimport { Extent, Polyline } from \"esri/geometry\";\r\nimport Graphic from \"esri/Graphic\";\r\nimport GeoJSONLayer from \"esri/layers/GeoJSONLayer\";\r\nimport React, { useState } from \"react\";\r\nimport \"./App.css\";\r\n\r\nimport Basemaps from \"./Components/Basemaps\";\r\nimport Header from \"./Components/Header\";\r\nimport MapUtils from \"./Components/MapUtils\";\r\nimport RouteLayer from \"./Components/RouteLayer\";\r\nimport RoutePicture from \"./Components/RoutePicture\";\r\nimport Slider from \"./Components/Slider\";\r\n\r\ninterface ITour {\r\n    map: any;\r\n    routeLayer: GeoJSONLayer;\r\n    picsLayer: GeoJSONLayer;\r\n    splits: number;\r\n    scales: number[];\r\n    pointGraphic: Graphic;\r\n    routeCoords: any;\r\n    picIndexes: number[];\r\n    routeNum: number;\r\n    coordNum: number;\r\n}\r\n\r\n// tslint:disable-next-line: no-object-literal-type-assertion\r\nconst tour = {} as ITour;\r\n\r\nconst gist = \"https://gist.githubusercontent.com/shadc/5f28c0d4f3d3fdf1e789/raw/4495bf6e4194adb1ce215c032c93c1fc8273e32a/Bluebird%2520Day%2520at%2520Mt.%2520Bachelor.geojson\";\r\nlet interval = 0;\r\nlet sliderNum = 10;\r\nlet sliderChanged = false;\r\n\r\nconst App = () => {\r\n    const [title, setTitle] = useState();\r\n    const [caption, setCaption] = useState(\"\");\r\n    const [pics, setPics] = useState([] as Graphic[]);\r\n    const [picAction, setPicAction] = useState();\r\n\r\n    const droneView = MapUtils.getUrlVars(\"droneView\") === \"true\" ? true : false;\r\n    const hidePhotos = MapUtils.getUrlVars(\"hidePhotos\") === \"true\" ? true : false;\r\n    const geoJson = MapUtils.getUrlVars(\"geoJson\") === \"false\" ? gist : MapUtils.getUrlVars(\"geoJson\");\r\n\r\n    const onStartTourClick = async () => {\r\n        tour.routeNum = 1; // 1 base;\r\n        tour.coordNum = 0; // 0 base;\r\n        startRoute();\r\n    };\r\n\r\n    const startRoute = async () => {\r\n        if (tour.map.graphics) { tour.map.graphics.removeAll(); }\r\n        tour.routeLayer.definitionExpression = \"OBJECTID < \" + tour.routeNum;\r\n        const graphics = await MapUtils.getGraphics(tour.routeLayer, tour.routeNum);\r\n\r\n        if (!graphics.length) {\r\n            setCaption(\"\");\r\n            return;\r\n        }\r\n\r\n        const featGeom = graphics[0].geometry as Polyline;\r\n        tour.routeCoords = MapUtils.getRouteCoords(featGeom, tour.splits);\r\n        setCaption(graphics[0].getAttribute(\"Caption\"));\r\n\r\n        tour.picIndexes = await MapUtils.getPicRouteIndex(tour.routeCoords, graphics[0].getAttribute(\"Route\"), tour.picsLayer);\r\n\r\n        if (droneView) {\r\n            interval = window.setInterval(startRouteInterval, intTime(sliderNum));\r\n        } else {\r\n            tour.map.goTo(featGeom).then(() => {\r\n                interval = window.setInterval(startRouteInterval, intTime(sliderNum));\r\n            });\r\n        }\r\n    };\r\n\r\n    let picIndex: number = 1;\r\n    const startRouteInterval = () => {\r\n\r\n        // -- Move to the next route if at the end of the interval\r\n        if (tour.coordNum > (tour.routeCoords.length - 1)) {\r\n            clearInterval(interval);\r\n            tour.coordNum = 0;\r\n            tour.routeNum++;\r\n            setTimeout(() => { startRoute(); }, 1000);\r\n            return;\r\n        }\r\n\r\n        if (sliderChanged) {\r\n            clearInterval(interval);\r\n            interval = window.setInterval(startRouteInterval, intTime(sliderNum));\r\n            sliderChanged = false;\r\n        }\r\n\r\n        // -- Move the graphic\r\n        const [longitude, latitude] = tour.routeCoords[tour.coordNum];\r\n        const point: any = { type: \"point\", longitude, latitude };\r\n        tour.pointGraphic.geometry = point;\r\n\r\n        // -- Create Breadcrumb\r\n        const graphic = tour.pointGraphic.clone();\r\n        graphic.symbol.set(\"size\", 1);\r\n        graphic.geometry = point;\r\n        tour.map.graphics.add(graphic);\r\n\r\n        if (droneView && tour.coordNum % 2 && tour.map.stationary) {\r\n            const point1 = (tour.coordNum > 10) ? tour.routeCoords[tour.coordNum - 10] : tour.routeCoords[tour.coordNum];\r\n            const point2 = (tour.coordNum < tour.routeCoords.length - 10) ? tour.routeCoords[tour.coordNum + 10] : tour.routeCoords[tour.coordNum];\r\n            const heading = MapUtils.getHeading(point1, point2);\r\n\r\n            tour.map.goTo({\r\n                center: [longitude, latitude],\r\n                heading,\r\n                tilt: (tour.map.camera.tilt > 1) ? tour.map.camera.tilt : 60,\r\n                zoom: 16,\r\n            },\r\n                {\r\n                    easing: \"linear\", // easing function to slow down when reaching the target\r\n                    speedFactor: .9, // animation is 10 times slower than default\r\n                },\r\n            );\r\n        }\r\n\r\n        // -- Collide with picture???\r\n        if (!hidePhotos && tour.picIndexes.includes(tour.coordNum)) {\r\n            clearInterval(interval);\r\n            setPicAction([picIndex, \"active\"]);\r\n            setTimeout(() => {\r\n                setPicAction([picIndex, \"deactive\"]);\r\n                setTimeout(() => {\r\n                    interval = window.setInterval(startRouteInterval, intTime(sliderNum));\r\n                    picIndex++;\r\n                }, 1000);\r\n            }, 4000);\r\n        }\r\n        tour.coordNum++;\r\n    };\r\n\r\n    const setTour = async (routeLayer: GeoJSONLayer, picsLayer: GeoJSONLayer, map: any, pointGraphic: Graphic) => {\r\n        tour.routeLayer = routeLayer;\r\n        tour.picsLayer = picsLayer;\r\n        tour.map = map;\r\n        tour.pointGraphic = pointGraphic;\r\n        tour.routeNum = 1; // 1 base;\r\n        tour.coordNum = 0; // 0 base;\r\n        tour.scales = MapUtils.getScales([4]);\r\n        tour.splits = await MapUtils.getSplit(routeLayer); // .then(result => tour.splits = result);\r\n\r\n        routeLayer.queryExtent().then((response: Extent) => {\r\n            tour.map.goTo(response.extent.expand(2), { easing: \"in-out-expo\" });\r\n        });\r\n\r\n        setPics(((await picsLayer.queryFeatures()).features as Graphic[]));\r\n        const filename = decodeURI(decodeURI(geoJson.substring(geoJson.lastIndexOf(\"/\") + 1)));\r\n        setTitle(filename.substr(0, filename.lastIndexOf(\".\")) || filename);\r\n    };\r\n\r\n    const scales = [4]; // Start at 4 because it's the minimum milliseconds HTML 5 setinterval spec will go.\r\n    for (let i = 0; i < 19; i++) {\r\n        const ts = scales[0];\r\n        const scaleVal = (ts * ((ts / 100) + 1.03));\r\n        scales.unshift(scaleVal);\r\n    }\r\n\r\n    const intTime = (val: number) => {\r\n        return scales[val - 1];\r\n    };\r\n\r\n    const sliderChange = (num: any) => {\r\n        sliderNum = num;\r\n        sliderChanged = true;\r\n    };\r\n\r\n    const loaderOptions = { url: \"https://js.arcgis.com/4.11\" };\r\n    return (\r\n        <>\r\n            <Header caption={caption} title={title} onClick={onStartTourClick} />\r\n\r\n            <Scene\r\n                loaderOptions={loaderOptions}\r\n                className=\"mapcontainer\"\r\n                mapProperties={{ ground: \"world-elevation\" }} // basemap: 'satellite',\r\n                viewProperties={{\r\n                    // center: [-121.6788, 44.0033],\r\n                    zoom: 2,\r\n                }}\r\n            >\r\n                <Slider handleChange={sliderChange} initSliderVal={sliderNum} />\r\n                <RouteLayer view={Scene} map={Map} gist={geoJson} setTour={setTour} />\r\n                <Basemaps view={Scene} map={Map} />\r\n            </Scene>\r\n\r\n            {<ul>\r\n                {pics.map((pic, index) =>\r\n                    <RoutePicture\r\n                        key={index}\r\n                        height={(index === 0) ? 10 + \"vh\" : ((85 / pics.length) * (index) + 10) + \"vh\"}\r\n                        id={index + 1}\r\n                        picAction={picAction}\r\n                        caption={pic.getAttribute(\"Caption\")}\r\n                        img={\"https://shadc.github.io/presentations/\" + pic.getAttribute(\"Pic\")}\r\n                    />,\r\n                )}\r\n            </ul>}\r\n\r\n        </>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\r\n    ),\r\n);\r\n\r\n// tslint:disable-next-line: interface-over-type-literal\r\ntype Config = {\r\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n    if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(\r\n            (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n            window.location.href,\r\n        );\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener(\"load\", () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config);\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    // tslint:disable-next-line: no-console\r\n                    console.log(\r\n                        \"This web app is being served cache-first by a service \" +\r\n                        \"worker. To learn more, visit https://bit.ly/CRA-PWA\",\r\n                    );\r\n                });\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then((registration) => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                if (installingWorker == null) {\r\n                    return;\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === \"installed\") {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            // tslint:disable-next-line: no-console\r\n                            console.log(\r\n                                \"New content is available and will be used when all \" +\r\n                                \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\",\r\n                            );\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration);\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            // tslint:disable-next-line: no-console\r\n                            console.log(\"Content is cached for offline use.\");\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch((error) => {\r\n            console.error(\"Error during service worker registration:\", error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl)\r\n        .then((response) => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get(\"content-type\");\r\n            if (\r\n                response.status === 404 ||\r\n                (contentType != null && contentType.indexOf(\"javascript\") === -1)\r\n            ) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then((registration) => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            // tslint:disable-next-line: no-console\r\n            console.log(\r\n                \"No internet connection found. App is running in offline mode.\",\r\n            );\r\n        });\r\n}\r\n\r\nexport function unregister() {\r\n    if (\"serviceWorker\" in navigator) {\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n            registration.unregister();\r\n        });\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport \"./index.css\";\r\n\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}